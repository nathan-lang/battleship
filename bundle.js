/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var _require = __webpack_require__(/*! ./pageSections.js */ \"./src/pageSections.js\"),\n  getFont = _require.getFont,\n  bg = _require.bg,\n  title = _require.title,\n  axis = _require.axis,\n  playGame = _require.playGame,\n  playerIndicator = _require.playerIndicator,\n  renderPlayerGameboard = _require.renderPlayerGameboard,\n  renderComputerGameboard = _require.renderComputerGameboard;\ndocument.body.style.margin = \"0px\";\ndocument.body.appendChild(getFont());\ndocument.body.appendChild(bg());\ndocument.body.appendChild(title());\ndocument.body.appendChild(axis());\ndocument.body.appendChild(playGame());\ndocument.body.appendChild(playerIndicator());\ndocument.body.appendChild(renderPlayerGameboard());\ndocument.body.appendChild(renderComputerGameboard());\n\n//# sourceURL=webpack://battleship/./src/index.js?");

/***/ }),

/***/ "./src/pageSections.js":
/*!*****************************!*\
  !*** ./src/pageSections.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   axis: () => (/* binding */ axis),\n/* harmony export */   bg: () => (/* binding */ bg),\n/* harmony export */   getFont: () => (/* binding */ getFont),\n/* harmony export */   playGame: () => (/* binding */ playGame),\n/* harmony export */   playerIndicator: () => (/* binding */ playerIndicator),\n/* harmony export */   renderComputerGameboard: () => (/* binding */ renderComputerGameboard),\n/* harmony export */   renderPlayerGameboard: () => (/* binding */ renderPlayerGameboard),\n/* harmony export */   title: () => (/* binding */ title)\n/* harmony export */ });\nvar _require = __webpack_require__(/*! ./props.js */ \"./src/props.js\"),\n  Ship = _require.Ship,\n  Gameboard = _require.Gameboard,\n  Player = _require.Player;\nfunction getFont() {\n  var s = document.createElement(\"style\");\n  s.textContent = \"@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');\";\n  return s;\n}\nfunction bg() {\n  var bg = document.createElement(\"img\");\n  // Image by Kym MacKinnon on Unsplash\n  bg.src = \"https://images.unsplash.com/photo-1599239663833-4c1cdc22892a?q=80&w=2832&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\";\n  bg.style.height = \"auto\";\n  bg.style.width = \"100vw\";\n  bg.style.position = \"fixed\";\n  return bg;\n}\nfunction title() {\n  var title = document.createElement(\"div\");\n  title.textContent = \"Battleship\";\n  title.style.position = \"absolute\";\n  title.style.left = \"45vw\";\n  title.style.top = \"5vh\";\n  title.style.fontFamily = \"'Poppins', sans-serif\";\n  title.style.fontWeight = \"200\";\n  title.style.fontStyle = \"normal\";\n  title.style.fontSize = \"30px\";\n  return title;\n}\nfunction axis() {\n  var axis = document.createElement(\"button\");\n  axis.classList.add(\"axis\");\n  axis.textContent = \"Axis: Y\"; // This is how it's actually on screen\n  var onYAxis = true;\n  axis.addEventListener(\"click\", function () {\n    if (onYAxis) {\n      axis.textContent = \"Axis: X\";\n      onYAxis = false;\n    } else {\n      axis.textContent = \"Axis: Y\";\n      onYAxis = true;\n    }\n  });\n  axis.style.position = \"absolute\";\n  axis.style.left = \"45.5vw\";\n  axis.style.top = \"12vh\";\n  axis.style.background = \"transparent\";\n  axis.style.border = \"1px solid black\";\n  axis.style.borderRadius = \"10px\";\n  axis.style.height = \"25px\";\n  return axis;\n}\nvar numberOfPlayerShips = 0;\nvar battleIsOn = false;\nvar isYourTurn = true;\nfunction playGame() {\n  var playButton = document.createElement(\"button\");\n  playButton.classList.add(\"play\");\n  playButton.textContent = \"Battle!\";\n  playButton.addEventListener(\"click\", function () {\n    if (numberOfPlayerShips === 5) {\n      battleIsOn = true;\n      var player = document.querySelector(\".player-indicator\");\n      console.log(\"isYourTurn:\", isYourTurn);\n      if (isYourTurn) {\n        player.textContent = \"Your turn.\";\n      } else {\n        player.textContent = \"Computer's turn.\";\n      }\n    } else {\n      alert(\"All of your ships haven't been placed yet. Please place them.\");\n    }\n  });\n  playButton.style.position = \"absolute\";\n  playButton.style.left = \"50.5vw\";\n  playButton.style.top = \"12vh\";\n  playButton.style.fontFamily = \"'Poppins', sans-serif\";\n  playButton.style.background = \"transparent\";\n  playButton.style.border = \"1px solid black\";\n  playButton.style.borderRadius = \"10px\";\n  playButton.style.height = \"25px\";\n  return playButton;\n}\nfunction playerIndicator() {\n  var player = document.createElement(\"div\");\n  player.classList.add(\"player-indicator\");\n  player.textContent = \"\";\n  player.style.fontFamily = \"'Poppins', sans-serif\";\n  player.style.position = \"absolute\";\n  player.style.left = \"47.5vw\";\n  player.style.top = \"16.5vh\";\n  return player;\n}\nvar playerGameboard = Gameboard();\nfunction renderPlayerGameboard() {\n  var board = document.createElement(\"div\");\n  board.classList.add(\"player-board\");\n  board.style.display = \"inline-grid\";\n  board.style.gridTemplate = \"repeat(10, 50px) / repeat(10, 50px)\";\n  board.style.border = \"1px solid black\";\n  board.style.position = \"absolute\";\n  board.style.bottom = \"10vh\";\n  board.style.left = \"10vw\";\n  var _loop = function _loop(i) {\n    var _loop2 = function _loop2(j) {\n      var piece = document.createElement(\"div\");\n      piece.classList.add(\"player-piece\");\n      piece.style.height = \"50px\";\n      piece.style.width = \"50px\";\n      piece.style.border = \"1px solid black\";\n      piece.addEventListener(\"click\", function () {\n        // Only do this when the number of player ships hasn't reached 5...\n        // otherwise, you're making unnecessary divs.\n        if (!battleIsOn) {\n          if (numberOfPlayerShips < 5) {\n            var shipSpace = document.createElement(\"div\");\n            var _axis = document.querySelector(\".axis\");\n            if (numberOfPlayerShips === 0) {\n              console.log(\"you clicked \" + i + \",\" + j);\n              console.log(\"axis:\", _axis);\n              if (_axis.textContent === \"Axis: Y\") {\n                if (playerGameboard.placeShip(i, j, \"x\", 1)) {\n                  // actually the y axis on the screen!\n                  shipSpace.style.height = \"250px\";\n                  shipSpace.style.width = \"50px\";\n                } else return;\n              } else if (_axis.textContent === \"Axis: X\") {\n                if (playerGameboard.placeShip(i, j, \"y\", 1)) {\n                  // actually the x axis on the screen!\n                  shipSpace.style.height = \"50px\";\n                  shipSpace.style.width = \"250px\";\n                } else return;\n              }\n              shipSpace.style.background = \"#ff6961\"; // pastel red\n            } else if (numberOfPlayerShips === 1) {\n              console.log(\"axis:\", _axis);\n              if (_axis.textContent === \"Axis: Y\") {\n                if (playerGameboard.placeShip(i, j, \"x\", 2)) {\n                  // actually the y axis on the screen!\n                  shipSpace.style.height = \"200px\";\n                  shipSpace.style.width = \"50px\";\n                } else return;\n              } else if (_axis.textContent === \"Axis: X\") {\n                if (playerGameboard.placeShip(i, j, \"y\", 2)) {\n                  // actually the x axis on the screen!\n                  shipSpace.style.height = \"50px\";\n                  shipSpace.style.width = \"200px\";\n                } else return;\n              }\n              shipSpace.style.background = \"#ff964f\"; // pastel orange\n            } else if (numberOfPlayerShips === 2) {\n              if (_axis.textContent === \"Axis: Y\") {\n                if (playerGameboard.placeShip(i, j, \"x\", 3)) {\n                  // actually the y axis on the screen!\n                  shipSpace.style.height = \"150px\";\n                  shipSpace.style.width = \"50px\";\n                } else return;\n              } else if (_axis.textContent === \"Axis: X\") {\n                if (playerGameboard.placeShip(i, j, \"y\", 3)) {\n                  // actually the x axis on the screen!\n                  shipSpace.style.height = \"50px\";\n                  shipSpace.style.width = \"150px\";\n                } else return;\n              }\n              shipSpace.style.background = \"#fdfd96\"; // pastel yellow\n            } else if (numberOfPlayerShips === 3) {\n              if (_axis.textContent === \"Axis: Y\") {\n                if (playerGameboard.placeShip(i, j, \"x\", 4)) {\n                  // actually the y axis on the screen!\n                  shipSpace.style.height = \"150px\";\n                  shipSpace.style.width = \"50px\";\n                } else return;\n              } else if (_axis.textContent === \"Axis: X\") {\n                if (playerGameboard.placeShip(i, j, \"y\", 4)) {\n                  // actually the x axis on the screen!\n                  shipSpace.style.height = \"50px\";\n                  shipSpace.style.width = \"150px\";\n                } else return;\n              }\n              shipSpace.style.background = \"#77dd77\"; // pastel green\n            } else if (numberOfPlayerShips === 4) {\n              if (_axis.textContent === \"Axis: Y\") {\n                if (playerGameboard.placeShip(i, j, \"x\", 5)) {\n                  // actually the y axis on the screen!\n                  shipSpace.style.height = \"100px\";\n                  shipSpace.style.width = \"50px\";\n                } else return;\n              } else if (_axis.textContent === \"Axis: X\") {\n                if (playerGameboard.placeShip(i, j, \"y\", 5)) {\n                  // actually the x axis on the screen!\n                  shipSpace.style.height = \"50px\";\n                  shipSpace.style.width = \"100px\";\n                } else return;\n              }\n              shipSpace.style.background = \"#8cd3db\"; // pastel blue\n            }\n            shipSpace.style.borderRadius = \"25px\";\n            piece.appendChild(shipSpace);\n            numberOfPlayerShips++;\n          }\n        }\n      });\n      board.appendChild(piece);\n    };\n    for (var j = 0; j < 10; j++) {\n      _loop2(j);\n    }\n  };\n  for (var i = 0; i < 10; i++) {\n    _loop(i);\n  }\n  return board;\n}\nfunction renderComputerGameboard() {\n  var gameboard = Gameboard();\n  for (var i = 1; i <= 5; i++) {\n    while (true) {\n      var randomX = Math.floor(Math.random() * 10);\n      var randomY = Math.floor(Math.random() * 10);\n      var xOrYAxis = Math.floor(Math.random() * 2);\n      var _axis2 = \"\";\n      console.log(\"trying \" + randomX + \",\" + randomY + \" on \" + xOrYAxis);\n      if (xOrYAxis === 0) _axis2 = \"x\";\n      if (xOrYAxis === 1) _axis2 = \"y\";\n      if (gameboard.placeShip(randomX, randomY, _axis2, i) === true) {\n        console.log(\"painting \" + randomX + \",\" + randomY);\n        break;\n      }\n    }\n  }\n  var board = document.createElement(\"div\");\n  board.style.display = \"inline-grid\";\n  board.style.gridTemplate = \"repeat(10, 50px) / repeat(10, 50px)\";\n  board.style.border = \"1px solid black\";\n  board.style.position = \"absolute\";\n  board.style.bottom = \"10vh\";\n  board.style.right = \"10vw\";\n  var _loop3 = function _loop3(_i) {\n    var _loop4 = function _loop4(j) {\n      var piece = document.createElement(\"div\");\n      piece.style.height = \"50px\";\n      piece.style.width = \"50px\";\n      piece.style.border = \"1px solid black\";\n      piece.addEventListener(\"click\", function () {\n        console.log(\"clicked!\");\n        if (battleIsOn) {\n          if (gameboard.getAttackedAreas()[_i][j] === false) {\n            console.log(\"shot!\");\n            var shot = document.createElement(\"div\");\n            //shot.style.zIndex = \"2\";\n            shot.style.height = \"50px\";\n            shot.style.width = \"50px\";\n            shot.style.borderRadius = \"25px\";\n            shot.style.position = \"absolute\";\n            shot.style.bottom = \"calc(61.8vh - calc(50px * \" + _i + \"))\";\n            shot.style.right = \"calc(31.25vw - calc(50px * \" + j + \"))\";\n            if (gameboard.receiveAttack(_i, j)) {\n              console.log(\"hit at \" + _i + \",\" + j + \"!\");\n              shot.style.background = \"lightgreen\";\n              shot.style.transform = \"scale(0.5)\";\n              gameboard.printAnySunk();\n            } else {\n              console.log(\"no hit at \" + _i + \",\" + j);\n              shot.style.background = \"black\";\n              shot.style.transform = \"scale(0.5)\";\n            }\n            if (gameboard.allSunk()) {\n              alert(\"You won! Refresh the game to restart.\");\n            }\n            piece.appendChild(shot);\n            var player = document.querySelector(\".player-indicator\");\n            if (isYourTurn) {\n              isYourTurn = false;\n            }\n            console.log(\"isYourTurn:\", isYourTurn);\n            if (!isYourTurn) {\n              player.textContent = \"CP's turn.\";\n              setTimeout(function () {\n                // setTimeout executes your function AFTER the timer.\n                console.log(\"shot!\");\n                var playerPiece = document.querySelector(\".player-piece\");\n                var shot = document.createElement(\"div\");\n                shot.style.height = \"50px\";\n                shot.style.width = \"50px\";\n                shot.style.borderRadius = \"25px\";\n                shot.style.position = \"absolute\";\n                var spotFound = false;\n                while (!spotFound) {\n                  var _randomX = Math.floor(Math.random() * 10);\n                  var _randomY = Math.floor(Math.random() * 10);\n                  if (playerGameboard.getAttackedAreas()[_randomX][_randomY] === false) {\n                    spotFound = true;\n                    if (playerGameboard.receiveAttack(_randomX, _randomY)) {\n                      console.log(\"hit a ship at \" + _randomX + \",\" + _randomY);\n                      shot.style.background = \"lightgreen\";\n                      shot.style.transform = \"scale(0.5)\";\n                    } else {\n                      console.log(\"not hit at \" + _randomX + \",\" + _randomY);\n                      shot.style.background = \"black\";\n                      shot.style.transform = \"scale(0.5)\";\n                    }\n                    if (playerGameboard.allSunk()) {\n                      alert(\"You lose! Refresh the game to restart.\");\n                    }\n                    shot.style.bottom = \"calc(61.8vh - calc(50px * \" + _randomX + \"))\";\n                    shot.style.left = \"calc(50px * \" + _randomY + \")\";\n                  }\n                }\n                playerPiece.append(shot);\n                isYourTurn = true;\n                player.textContent = \"Your turn.\";\n              }, 250);\n            }\n          } else {\n            alert(\"This area is already attacked. Choose a different one.\");\n          }\n        }\n      });\n      if (gameboard.getBoard()[_i][j] === true) {\n        console.log(\"get ships length:\", gameboard.getShips().length);\n        for (var k = 0; k < gameboard.getShips().length; k++) {\n          var ship = gameboard.getShips()[k];\n          console.log(\"ship:\", ship);\n          var currentCoordinate = [_i, j];\n          console.log(\"ship.getCoordinates():\", ship.getCoordinates(), \"currentCoordinate:\", currentCoordinate);\n          var shipSpot = document.createElement(\"div\");\n          //shipSpot.style.zIndex = \"1\";\n          //shipSpot.style.position = \"relative\";\n          var arraysAreEqual = true;\n          for (var _i2 = 0; _i2 < ship.getCoordinates().length; _i2++) {\n            if (ship.getCoordinates()[_i2] != currentCoordinate[_i2]) {\n              arraysAreEqual = false;\n            }\n          }\n          if (arraysAreEqual) {\n            console.log(\"they're equal\");\n            if (ship.getType() === 1) {\n              if (ship.getAxis() === \"x\") {\n                // On the screen, it's actually the y axis.\n                shipSpot.style.height = \"250px\";\n                shipSpot.style.width = \"50px\";\n              } else if (ship.getAxis() === \"y\") {\n                shipSpot.style.height = \"50px\";\n                shipSpot.style.width = \"250px\";\n              }\n              shipSpot.style.background = \"transparent\";\n            } else if (ship.getType() === 2) {\n              if (ship.getAxis() === \"x\") {\n                // On the screen, it's actually the y axis.\n                shipSpot.style.height = \"200px\";\n                shipSpot.style.width = \"50px\";\n              } else if (ship.getAxis() === \"y\") {\n                shipSpot.style.height = \"50px\";\n                shipSpot.style.width = \"200px\";\n              }\n              shipSpot.style.background = \"transparent\";\n            } else if (ship.getType() === 3 || ship.getType() === 4) {\n              if (ship.getAxis() === \"x\") {\n                // On the screen, it's actually the y axis.\n                shipSpot.style.height = \"150px\";\n                shipSpot.style.width = \"50px\";\n              } else if (ship.getAxis() === \"y\") {\n                shipSpot.style.height = \"50px\";\n                shipSpot.style.width = \"150px\";\n              }\n              if (ship.getType() === 3) {\n                shipSpot.style.background = \"transparent\";\n              } else if (ship.getType() === 4) {\n                shipSpot.style.background = \"transparent\";\n              }\n            } else if (ship.getType() === 5) {\n              if (ship.getAxis() === \"x\") {\n                // On the screen, it's actually the y axis.\n                shipSpot.style.height = \"100px\";\n                shipSpot.style.width = \"50px\";\n              } else if (ship.getAxis() === \"y\") {\n                shipSpot.style.height = \"50px\";\n                shipSpot.style.width = \"100px\";\n              }\n              shipSpot.style.background = \"transparent\";\n            }\n            shipSpot.style.borderRadius = \"25px\";\n            piece.appendChild(shipSpot);\n          }\n        }\n      }\n      board.appendChild(piece);\n    };\n    for (var j = 0; j < 10; j++) {\n      _loop4(j);\n    }\n  };\n  for (var _i = 0; _i < 10; _i++) {\n    _loop3(_i);\n  }\n  return board;\n}\n\n//# sourceURL=webpack://battleship/./src/pageSections.js?");

/***/ }),

/***/ "./src/props.js":
/*!**********************!*\
  !*** ./src/props.js ***!
  \**********************/
/***/ ((module) => {

eval("function Ship() {\n  var length = 0;\n  var axis = \"\";\n  var coordinates = Array(2);\n  var timesHit = 0;\n  var type = -1;\n  var getType = function getType() {\n    return type;\n  };\n  var setType = function setType(t) {\n    return type = t;\n  };\n  var getLength = function getLength() {\n    return length;\n  };\n  var setLength = function setLength(len) {\n    return length = len;\n  };\n  var getAxis = function getAxis() {\n    return axis;\n  };\n  var setAxis = function setAxis(ax) {\n    return axis = ax;\n  };\n  var getCoordinates = function getCoordinates() {\n    return coordinates;\n  };\n  var setCoordinates = function setCoordinates(x, y) {\n    return coordinates = [x, y];\n  };\n  var getTimesHit = function getTimesHit() {\n    return timesHit;\n  };\n  var hit = function hit() {\n    return timesHit++;\n  };\n  var isSunk = function isSunk() {\n    if (length - getTimesHit() != 0) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  return {\n    getType: getType,\n    setType: setType,\n    getLength: getLength,\n    setLength: setLength,\n    getAxis: getAxis,\n    setAxis: setAxis,\n    getCoordinates: getCoordinates,\n    setCoordinates: setCoordinates,\n    getTimesHit: getTimesHit,\n    hit: hit,\n    isSunk: isSunk\n  };\n}\nfunction Gameboard() {\n  var ships = [];\n  var board = new Array(10);\n  for (var i = 0; i < board.length; i++) {\n    board[i] = [];\n  }\n  for (var _i = 0; _i < 10; _i++) {\n    for (var j = 0; j < 10; j++) {\n      board[_i][j] = false;\n    }\n  }\n  var attackedAreas = new Array(10);\n  for (var _i2 = 0; _i2 < attackedAreas.length; _i2++) {\n    attackedAreas[_i2] = [];\n  }\n  for (var _i3 = 0; _i3 < 10; _i3++) {\n    for (var _j = 0; _j < 10; _j++) {\n      attackedAreas[_i3][_j] = false;\n    }\n  }\n  var getShips = function getShips() {\n    return ships;\n  };\n  var setShips = function setShips(myShips) {\n    return ships = myShips;\n  };\n  var getBoard = function getBoard() {\n    return board;\n  };\n  var getAttackedAreas = function getAttackedAreas() {\n    return attackedAreas;\n  };\n  var placeShip = function placeShip(x, y, axis, type) {\n    // Ships when placed on x axis are going to the RIGHT of the origin.\n    // Ships when placed on y axis are going to the BOTTOM of the origin.\n    var ship = Ship();\n    ship.setCoordinates(x, y);\n    var len = 0;\n    if (type === 1) {\n      ship.setLength(5);\n      ship.setType(1);\n      len = 5;\n    } else if (type === 2) {\n      ship.setLength(4);\n      ship.setType(2);\n      len = 4;\n    } else if (type === 3) {\n      ship.setLength(3);\n      ship.setType(3);\n      len = 3;\n    } else if (type === 4) {\n      ship.setLength(3);\n      ship.setType(4);\n      len = 3;\n    } else if (type === 5) {\n      ship.setLength(2);\n      ship.setType(5);\n      len = 2;\n    }\n    if (axis === \"x\") {\n      ship.setAxis(\"x\");\n      if (x + len > 10) {\n        return false;\n      }\n      for (var _i4 = x; _i4 < x + len; _i4++) {\n        if (board[_i4][y] === true) {\n          return false;\n        }\n      }\n      for (var _i5 = x; _i5 < x + len; _i5++) {\n        board[_i5][y] = true;\n      }\n    } else if (axis === \"y\") {\n      ship.setAxis(\"y\");\n      if (y + len > 10) {\n        return false;\n      }\n      for (var _i6 = y; _i6 < y + len; _i6++) {\n        if (board[x][_i6] === true) {\n          return false;\n        }\n      }\n      for (var _i7 = y; _i7 < y + len; _i7++) {\n        board[x][_i7] = true;\n      }\n    }\n    ships.push(ship);\n    setShips(ships);\n    return true;\n  };\n  var receiveAttack = function receiveAttack(x, y) {\n    // returns true if the attack got a ship, returns false if it didn't.\n    if (attackedAreas[x][y] === false) {\n      attackedAreas[x][y] = true;\n      for (var _i8 = 0; _i8 < ships.length; _i8++) {\n        var len = ships[_i8].getLength();\n        var ax = ships[_i8].getAxis();\n        var origin = ships[_i8].getCoordinates();\n        if (ax === \"x\") {\n          if (y === origin[1] && x >= origin[0] && x < origin[0] + len) {\n            ships[_i8].hit();\n            return true;\n          }\n        } else if (ax === \"y\") {\n          if (x === origin[0] && y >= origin[1] && y < origin[1] + len) {\n            ships[_i8].hit();\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  var printAnySunk = function printAnySunk() {\n    for (var _i9 = 0; _i9 < ships.length; _i9++) {\n      if (ships[_i9].isSunk() === true) {\n        console.log(\"ship \" + _i9 + \" has sunk!\");\n      }\n    }\n  };\n  var allSunk = function allSunk() {\n    for (var _i10 = 0; _i10 < ships.length; _i10++) {\n      if (ships[_i10].isSunk() === false) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return {\n    getShips: getShips,\n    setShips: setShips,\n    receiveAttack: receiveAttack,\n    getBoard: getBoard,\n    getAttackedAreas: getAttackedAreas,\n    placeShip: placeShip,\n    printAnySunk: printAnySunk,\n    allSunk: allSunk\n  };\n}\nfunction Player() {\n  var board;\n  var getBoard = function getBoard() {\n    return board = Gameboard();\n  };\n  return {\n    getBoard: getBoard\n  };\n}\nmodule.exports = {\n  Ship: Ship,\n  Gameboard: Gameboard,\n  Player: Player\n};\n\n//# sourceURL=webpack://battleship/./src/props.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;